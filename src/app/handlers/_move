import { CuiSwipeAnimationEngine } from "../../core/animation/engine";
import { ErrorBase, EVENTS, ICuiEventBus, is } from "../../core/index";
import { CuiMoveEventListener, ICuiMoveEvent } from "../../core/listeners/move";

export class CuiMoveHandler {
    #animtionEngine: CuiSwipeAnimationEngine;
    #element: Element;
    #listener: ICuiMoveHandlerMode;
    #onMove: (data: ICuiMoveEvent) => void;
    constructor(mode: "standalone" | "global", bus?: ICuiEventBus) {
        if (mode === "standalone") {
            this.#listener = new CuiMoveHandlerModeStandalone();
        } else {
            this.#listener = new CuiMoveHandlerModeGlobal(bus);
        }

    }

    setElement() {

    }

    attach() {
        this.#listener.attach(this.#onMove.bind(this));
    }

    detach() {
        this.#listener.detach()
    }

    private onMoveCallback(callback: (data: ICuiMoveEvent) => void) {
        this.#onMove = callback;
    }

    private isValid(): boolean {
        return is(this.#element);
    }
}

interface ICuiMoveHandlerMode {
    attach(callback: (data: ICuiMoveEvent) => void): void;
    detach(): void;
}

class CuiMoveHandlerModeStandalone implements ICuiMoveHandlerMode {
    #listener: CuiMoveEventListener;
    attach(callback: (data: ICuiMoveEvent) => void): void {
        if (!this.#listener || (this.#listener && !this.#listener.isAttached())) {
            this.#listener = new CuiMoveEventListener();
            this.#listener.setCallback(callback);
            this.#listener.attach();
        }
    }

    detach(): void {
        if (this.#listener.isAttached()) {
            this.#listener.detach();
            this.#listener = null;
        }
    }
}


class CuiMoveHandlerModeGlobal implements ICuiMoveHandlerMode {
    #eventId: string;
    #bus: ICuiEventBus;
    constructor(bus: ICuiEventBus) {
        if (!bus) {
            throw new CuiMoveHandlerModeError("Event bus is required but provided")
        }
        this.#bus = bus;
    }
    attach(callback: (data: ICuiMoveEvent) => void): void {
        if (!this.#eventId) {
            this.#eventId = this.#bus.on(EVENTS.GLOBAL_MOVE, callback);
        }
    }

    detach(): void {
        if (this.#eventId) {
            this.#bus.detach(EVENTS.GLOBAL_MOVE, this.#eventId);
            this.#eventId = null;
        }
    }
}

export class CuiMoveHandlerModeError extends ErrorBase {
    constructor(message?: string) {
        super("CuiMoveHandlerModeError", message);
    }
}